pipeline{
    agent any
    tools{
        maven 'Maven3'
        jdk 'OracleJDK8'
    }
    stages{
        stage('Fetch Code'){
            steps{
                git branch: 'vp-rem', url: 'https://github.com/devopshydclub/vprofile-project.git'
            }
        }
        stage('Build'){
           steps{
             sh 'mvn clean install -DskipTests'
           }
           post{
            success{
                echo "Now archiving the build"
                archiveArtifacts artifacts: '**/target/*.war'
            }
           }
        }
        stage('Test'){
            steps{
                sh 'mvn test'
            }
        }
        stage('Checkstyle analysis'){
            steps{
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage('Sonar analysis'){
            environment{
                scannerHome = tool 'sonar4.7'
            }
            steps{
                withSonarQubeEnv('sonar') {
                        sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                        -Dsonar.projectName=vprofile-repo \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sources=src/ \
                        -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                        -Dsonar.junit.reportsPath=target/surefire-reports \
                        -Dsonar.jacoco.reportPath=target/jacoco.exec \
                        -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                    
                }

            }
        }

        stage('Quality gate'){
            steps{
                timeout(time:1 , unit: 'HOURS'){
                    // Parameter indicates whther to set pipeline to unstable if the quality gate fails
                    // true indicates set pipeline to unstable and false indicates don't do the same
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Upload artifact'){
            steps{
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: '52.87.253.75:8081',
                    groupId: 'QA',
                    version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                    repository: 'vprofile-repository',
                    credentialsId: 'nexusLogin',
                    artifacts: [
                        [artifactId: 'vproapp',
                        classifier: '',
                        file: 'target/vprofile-v2.war',
                        type: 'war']
                    ]
                )
            }
        }

    }
}


