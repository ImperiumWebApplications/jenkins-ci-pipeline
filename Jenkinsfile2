pipeline {
    agent any
    tools{
        maven "Maven3"
        jdk "OracleJDK8"
    }
    environment{
        registryCredential = 'ecr:us-east-1:awscreds'
        appRegistry = '128029195320.dkr.ecr.us-east-1.amazonaws.com/vprofileimg'
        vprofileRegistry = 'https://128029195320.dkr.ecr.us-east-1.amazonaws.com'
    }
    stages{
        stage('Fetch Code'){
            steps{
                git branch: 'docker', url: 'https://github.com/devopshydclub/vprofile-project.git'
            }
        }
        stage('Test'){
            steps{
                sh 'mvn test'
            }
        }
        stage('Code analysis with checkstyle'){
            steps{
                sh 'mvn checkstyle:checkstyle'
            }
            post {
                success{
                    echo 'Generated analysis results'
                }
            }
        }
        stage('Build and sonarqube analysis'){
            environment{
                scannerHome= tool 'sonar4.7'
            }
            steps{
                withSonarQubeEnv('sonar'){
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                    -Dsonar.projectName=vprofile-repo-docker \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sourece=src/ \
                    -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest \
                    -Dsonar.junit.reportsPath=target/surefire-reports \
                    -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                    -Dsonar.checkstyle.reportPaths=target/checstyle-result.xml'''
                }
            }
        }
        stage('Quality Gate'){
            steps{
                timeout(time: 1, unit: 'HOURS'){
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Build App Image'){
            steps{
                script{
                    dockerImage=docker.build(appRegistry+":${env.BUILD_NUMBER}", "./Docker-files/app/multistage/")
                }
            }
        }
        stage('Upload App Image'){
            steps{
                script{
                    docker.withRegistry(vprofileRegistry, registryCredential){
                        dockerImage.push("${env.BUILD_NUMBER}")
                        dockerImage.push("latest")
                    }
                }
            }
        }
    }
}